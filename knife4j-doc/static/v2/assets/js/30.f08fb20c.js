(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{383:function(a,t,s){"use strict";s.r(t);var n=s(42),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"_4-5-基于knife4j的docker镜像快速聚合openapi"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-基于knife4j的docker镜像快速聚合openapi"}},[a._v("#")]),a._v(" 4.5 基于Knife4j的Docker镜像快速聚合OpenAPI")]),a._v(" "),s("p",[a._v("在前面的实战文章中，更多的是面向Java开发者，通过Spring Boot框架，快速聚合OpenAPI文档。")]),a._v(" "),s("p",[a._v("那么其他语言能否也能这么方便的使用Knife4j呢？")]),a._v(" "),s("p",[a._v("答案是肯定的，Knife4j为了让其他语言非常方便的使用Knife4j来渲染聚合OpenAPI文档，在DockerHub中推送了"),s("a",{attrs:{href:"https://hub.docker.com/repository/docker/xiaoymin/knife4j",target:"_blank",rel:"noopener noreferrer"}},[a._v("Knife4j的镜像"),s("OutboundLink")],1),a._v("，")]),a._v(" "),s("p",[a._v("镜像地址："),s("a",{attrs:{href:"https://hub.docker.com/repository/docker/xiaoymin/knife4j",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://hub.docker.com/repository/docker/xiaoymin/knife4j"),s("OutboundLink")],1)]),a._v(" "),s("p",[a._v("如果你的本机或者服务器安装了Docker，那么利用Knife4j的镜像来聚合OpenAPI将会非常方便")]),a._v(" "),s("p",[a._v("首先需要将镜像从DockerHub拉到本地，命令如下：")]),a._v(" "),s("div",{staticClass:"language-shell script extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("docker pull xiaoymin/knife4j:latest\n")])])]),s("p",[a._v("如果pull速度比较慢的话，开发者可以配置镜像源")]),a._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[a._v("/etc/docker/daemon.json")]),a._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"registry-mirrors"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"https://registry.docker-cn.com"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"http://hub-mirror.c.163.com"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"https://3laho3y3.mirror.aliyuncs.com"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"https://mirror.ccs.tencentyun.com"')]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])])]),a._v(" "),s("p",[a._v("镜像下载到本地机器后，下面将详细介绍如何通过Knife4j的镜像实现上面文章介绍的4中不同方式的聚合OpenAPI文档")]),a._v(" "),s("h2",{attrs:{id:"镜像说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#镜像说明"}},[a._v("#")]),a._v(" 镜像说明")]),a._v(" "),s("p",[a._v("Knife4j的镜像是一个基于Spring Boot框架开发的Web项目，对外默认端口"),s("code",[a._v("8888")])]),a._v(" "),s("p",[a._v("源码地址："),s("a",{attrs:{href:"https://gitee.com/xiaoym/knife4j/tree/v2/knife4j-aggregation-docker",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://gitee.com/xiaoym/knife4j/tree/v2/knife4j-aggregation-docker"),s("OutboundLink")],1)]),a._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[a._v("Dockerfile文件")]),a._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("FROM")]),a._v(" openjdk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("8"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("jdk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("alpine\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("LABEL")]),a._v(" version="),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"2.0"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("LABEL")]),a._v(" released"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("date=2020/11/25\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("LABEL")]),a._v(" author="),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"xiaoymin@foxmail.com"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("LABEL")]),a._v(" description="),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Knife4jAggregation OpenAPI,RunAnyWhere!!!"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("MAINTAINER")]),a._v(" xiaoymin\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("RUN")]),a._v(" mkdir /app\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Disk模式数据挂载目录")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("RUN")]),a._v(" mkdir /app/data\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ADD")]),a._v(" src/main/resources/application.yml /app/app.yml\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ADD")]),a._v(" target/knife4j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("aggregation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("docker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("1.0.jar /app/app.jar\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENTRYPOINT")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"java"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-jar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-Djava.security.egd=file:/dev/./urandom"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-Duser.timezone=Asia/Shanghai"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/app/app.jar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"--spring.config.location=/app/app.yml"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#EXPOSE 8888:")]),a._v("\n")])])])]),a._v(" "),s("p",[a._v("从Knife4j的Dockerfile文件中，我们可以看到为Knife4j的应用创建了一个"),s("code",[a._v("/app")]),a._v("目录和"),s("code",[a._v("/app/data")]),a._v("目录，用来存放jar文件和yml配置文件，该目录是通过外部文件与Docker容器进行挂载关联的关键。")]),a._v(" "),s("h2",{attrs:{id:"disk模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#disk模式"}},[a._v("#")]),a._v(" Disk模式")]),a._v(" "),s("p",[a._v("Disk模式主要是从本地聚合OpenAPI规范，那么如何利用Knife4j的容器进行渲染呢？这里就要用到我们刚刚上面说的文件挂载")]),a._v(" "),s("p",[a._v("第一步：在服务器(宿主机)上创建相关目录，例如："),s("code",[a._v("/home/openapi")])]),a._v(" "),s("p",[a._v("我们在该目录下主要存放两种类型的文件目录，1种是Knife4j镜像文件需要的yml配置文件，第二种是存放OpenAPI的规范JSON,目录结构如下：")]),a._v(" "),s("div",{staticClass:"language-shell script extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@izbpc3 openapi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# pwd")]),a._v("\n/home/openapi\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@izbpc3 openapi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ll")]),a._v("\ntotal "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v("\n-rw-r--r-- "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" root root  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("241")]),a._v(" Nov "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("25")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("19")]),a._v(":42 app.yml\ndrwxr-xr-x "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" root root "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4096")]),a._v(" Nov "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("25")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("19")]),a._v(":41 data\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@izbpc3 openapi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# cd data")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@izbpc3 data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ll")]),a._v("\ntotal "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("256")]),a._v("\n-rw-r--r-- "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" root root  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21448")]),a._v(" Nov "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("25")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("19")]),a._v(":41 open-api.json\n-rw-r--r-- "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" root root "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("237303")]),a._v(" Nov "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("25")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("19")]),a._v(":41 openapi.json\n")])])]),s("p",[a._v("Disk模式我们主要需要做的是修改app.yml配置文件中的配置，指定Knife4j的镜像从本地加载指定的openapi.json，通过界面显示")]),a._v(" "),s("p",[s("code",[a._v("app.yml")]),a._v("配置修改如下：")]),a._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("server")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8888")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("knife4j")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("enableAggregation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[a._v("true")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("disk")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("enable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[a._v("true")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("routes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" 用户AAAAAAAAAAA\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("location")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" /app/data/open"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("api.json\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" 用户BBBBBBBBBBBB\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("location")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" /app/data/openapi.json\n")])])]),s("p",[a._v("这里需要注意的是")]),a._v(" "),s("p",[a._v("1、location我们使用的是容器的目录"),s("code",[a._v("/app")]),a._v(",我们最终创建容器的时候会将宿主机的目录("),s("code",[a._v("/home/openapi/data")]),a._v(")挂载给容器，达到文件共享的目的")]),a._v(" "),s("p",[a._v("2、在"),s("code",[a._v("app.yml")]),a._v("配置中指定的端口是容器的端口，Knife4j默认端口8888，如果开发者使用该配置并且修改了端口，那么需要在端口映射的时候也相应的进行修改")]),a._v(" "),s("p",[a._v("第二步：启动Knife4j容器查看效果")]),a._v(" "),s("p",[a._v("通过Docker命令创建容器，命令如下：")]),a._v(" "),s("div",{staticClass:"language-shell script extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@izbx23 app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# docker run -itd --name myopenapi -p 18002:8888 -v /home/openapi/app.yml:/app/app.yml -v /home/openapi/data:/app/data xiaoymin/knife4j")]),a._v("\n3f0ed4cde46dd8a625e0338bc8cb1688059c7169447bda5681a34d93e2ba7c3e\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@izbx23 app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# docker ps ")]),a._v("\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES\ne678bccd4d66        xiaoymin/knife4j    "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"java -jar -Djava.se…"')]),a._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" seconds ago       Up "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" seconds        "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0")]),a._v(".0.0:18002-"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8888")]),a._v("/tcp   myopenapi\n")])])]),s("ul",[s("li",[a._v("--name命令是指定一个别名")]),a._v(" "),s("li",[a._v("-p代表端口映射 18002是宿主机端口号，8888是容器的端口号，")]),a._v(" "),s("li",[a._v("-v参数则是将本地目录挂载和容器共享,此处主要挂载两个文件，一个是app.yml配置文件，一个是openapi.json文件")])]),a._v(" "),s("p",[a._v("此时，我们通过端口号进行访问："),s("code",[a._v("http://localhost:18002/doc.html")])]),a._v(" "),s("p",[a._v("效果图如下：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/knife4j/assert/aggregation/docker-disk.png",alt:""}})]),a._v(" "),s("p",[a._v("容器创建成功后，我们可以访问容器的文件系统，通过命令如下：")]),a._v(" "),s("div",{staticClass:"language-shell script extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@izbx23 conf.d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# docker exec -it myopenapi sh")]),a._v("\n/ "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ls")]),a._v("\napp    bin    dev    etc    home   lib    media  mnt    opt    proc   root   run    sbin   srv    sys    tmp    usr    var\n/ "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# cd app")]),a._v("\n/app "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ls")]),a._v("\napp.jar  app.yml  data\n/app "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# cd data")]),a._v("\n/app/data "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ls")]),a._v("\nopen-api.json  openapi.json\n/app/data "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ")]),a._v("\n")])])]),s("p",[a._v("我们在容器中的文件系统中"),s("code",[a._v("/app/data")]),a._v("目录中，其实可以看到，这个目录中的文件和我们通过创建容器时-v参数挂载的目录文件是一致的。")]),a._v(" "),s("h2",{attrs:{id:"cloud模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cloud模式"}},[a._v("#")]),a._v(" Cloud模式")]),a._v(" "),s("p",[a._v("Cloud模式就相对简单多了，我们只需要修改当前的app.yml配置文件即可，然后创建容器时进行覆盖即可")]),a._v(" "),s("p",[a._v("任意取目前Knife4j的线上demo两个OpenAPI规范接口地址：")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"http://knife4j.xiaominfo.com/v2/api-docs?group=2.X%E7%89%88%E6%9C%AC",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://knife4j.xiaominfo.com/v2/api-docs?group=2.X版本"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"http://knife4j.xiaominfo.com/v2/api-docs?group=3.%E9%BB%98%E8%AE%A4%E6%8E%A5%E5%8F%A3",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://knife4j.xiaominfo.com/v2/api-docs?group=3.默认接口"),s("OutboundLink")],1)])]),a._v(" "),s("p",[a._v("配置yml配置文件，如下：")]),a._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("server")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8888")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("knife4j")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("enableAggregation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[a._v("true")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("cloud")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("enable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[a._v("true")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("routes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" cloud1\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("uri")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" knife4j.xiaominfo.com\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("location")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" /v2/api"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("docs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("?")]),a._v("group=2.X版本\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" cloud2\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("uri")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" knife4j.xiaominfo.com\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("location")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" /v2/api"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("docs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("?")]),a._v("group=3.默认接口\n")])])]),s("p",[a._v("通过Docker命令创建容器，命令如下：")]),a._v(" "),s("div",{staticClass:"language-shell script extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@izbx23 openapi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# docker run -itd --name cloudapi -p 18002:8888 -v /home/openapi/app.yml:/app/app.yml xiaoymin/knife4j")]),a._v("\n6b81844e0c605704eef3ffcb207e090a1139a9fbc8dcf0a43efdcb60f41d327c\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@izbx23 openapi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# docker ps")]),a._v("\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES\n6b81844e0c60        xiaoymin/knife4j    "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"java -jar -Djava.se…"')]),a._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" seconds ago       Up "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" seconds        "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0")]),a._v(".0.0:18002-"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8888")]),a._v("/tcp   cloudapi\n")])])]),s("ul",[s("li",[a._v("--name命令是指定一个别名("),s("code",[a._v("cloudapi")]),a._v(")")]),a._v(" "),s("li",[a._v("-p代表端口映射 18002是宿主机端口号，8888是容器的端口号，")]),a._v(" "),s("li",[a._v("-v参数则是将本地目录挂载和容器共享,此处只需要覆盖app.yml配置文件即可，因为我们的OpenAPI数据来源于HTTP接口")])]),a._v(" "),s("p",[a._v("此时，我们通过端口号进行访问："),s("code",[a._v("http://localhost:18002/doc.html")])]),a._v(" "),s("p",[a._v("效果图如下：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/knife4j/assert/aggregation/docker-cloud.png",alt:""}})]),a._v(" "),s("h2",{attrs:{id:"注册中心-eureka-nacos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注册中心-eureka-nacos"}},[a._v("#")]),a._v(" 注册中心(Eureka && Nacos)")]),a._v(" "),s("p",[a._v("至于从注册中心(Eureka && Nacos)进行OpenAPI的聚合和Cloud模式下一样，开发者只需要修改app.yml配置文件，然后通过-v参数进行挂载覆盖文件即可。更多的配置需要参考聚合组件的文档参数"),s("RouterLink",{attrs:{to:"/archive/2.0.9/documentation/knife4jAggregation.html"}},[a._v("详细介绍文档")])],1),a._v(" "),s("comment-comment")],1)}),[],!1,null,null,null);t.default=e.exports}}]);