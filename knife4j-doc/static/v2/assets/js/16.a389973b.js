(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{373:function(e,t,n){"use strict";n.r(t);var a=n(42),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_5-1-knife4j-net-core封装过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-knife4j-net-core封装过程"}},[e._v("#")]),e._v(" 5.1 Knife4j+.NET Core封装过程")]),e._v(" "),n("p",[e._v("支持 .NET Core3.0+或.NET Standard2.0。")]),e._v(" "),n("p",[n("strong",[n("a",{attrs:{href:"https://gitee.com/xiaoym/knife4j",target:"_blank",rel:"noopener noreferrer"}},[e._v("knife4j UI"),n("OutboundLink")],1)]),e._v(" ，实现swagger的规范，本文介绍如何将他集成到.NET Core中。")]),e._v(" "),n("ul",[n("li",[e._v("GitHub 开源地址 "),n("a",{attrs:{href:"https://github.com/luoyunchong/IGeekFan.AspNetCore.Knife4jUI",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/luoyunchong/IGeekFan.AspNetCore.Knife4jUI"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("概念对应关系如下")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("功能")]),e._v(" "),n("th",[e._v("c#")]),e._v(" "),n("th",[e._v("java")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("实现swagger规范")]),e._v(" "),n("td",[n("a",{attrs:{href:"https://github.com/domaindrivendev/Swashbuckle.AspNetCore",target:"_blank",rel:"noopener noreferrer"}},[e._v("Swashbuckle.AspNetCore"),n("OutboundLink")],1)]),e._v(" "),n("td",[e._v("spring-fox")])]),e._v(" "),n("tr",[n("td",[e._v("封装成nuget包/maven包的UI库")]),e._v(" "),n("td",[e._v("Swashbuckle.AspNetCore.SwaggerUI")]),e._v(" "),n("td",[e._v("knife4j-v3-spring-ui")])]),e._v(" "),n("tr",[n("td",[e._v("UI库")]),e._v(" "),n("td",[e._v("swagger-ui-dist")]),e._v(" "),n("td",[e._v("knife4j-vue-v3(swagger v3版本)")])])])]),e._v(" "),n("h4",{attrs:{id:"注意"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[e._v("#")]),e._v(" 注意")]),e._v(" "),n("p",[e._v("swagger v2和v3版本不一样，我只实现了swagger v3版本的封装。")]),e._v(" "),n("h3",{attrs:{id:"源码下载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#源码下载"}},[e._v("#")]),e._v(" 源码下载")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://gitee.com/xiaoym/knife4j",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://gitee.com/xiaoym/knife4j"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/domaindrivendev/Swashbuckle.AspNetCore",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/domaindrivendev/Swashbuckle.AspNetCore"),n("OutboundLink")],1)])]),e._v(" "),n("h3",{attrs:{id:"swashbuckle-aspnetcore-swaggerui。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#swashbuckle-aspnetcore-swaggerui。"}},[e._v("#")]),e._v(" Swashbuckle.AspNetCore.SwaggerUI。")]),e._v(" "),n("p",[e._v("通过中间件SwaggerUI中间件Middleware，Invoke方法中，替换了Index.html中的%(DocumentTitle) %(HeadContent),%(ConfigObject)等等 。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('private readonly SwaggerUIOptions _options;\n//xxx\n  \npublic async Task Invoke(HttpContext httpContext)\n{ \n//xxx\n    if (httpMethod == "GET" && Regex.IsMatch(path, $"^/{Regex.Escape(_options.RoutePrefix)}/?index.html$"))\n    {\n        await RespondWithIndexHtml(httpContext.Response);\n        return;\n    }\n//xxx\n  }\n\nprivate async Task RespondWithIndexHtml(HttpResponse response)\n{\n    response.StatusCode = 200;\n    response.ContentType = "text/html;charset=utf-8";\n\n    using (var stream = _options.IndexStream())\n    {\n        // Inject arguments before writing to response\n        var htmlBuilder = new StringBuilder(new StreamReader(stream).ReadToEnd());\n        foreach (var entry in GetIndexArguments())\n        {\n            htmlBuilder.Replace(entry.Key, entry.Value);\n        }\n\n        await response.WriteAsync(htmlBuilder.ToString(), Encoding.UTF8);\n    }\n}\n\nprivate IDictionary<string, string> GetIndexArguments()\n{\n    return new Dictionary<string, string>()\n    {\n        { "%(DocumentTitle)", _options.DocumentTitle },\n        { "%(HeadContent)", _options.HeadContent },\n        { "%(ConfigObject)", JsonSerializer.Serialize(_options.ConfigObject, _jsonSerializerOptions) },\n        { "%(OAuthConfigObject)", JsonSerializer.Serialize(_options.OAuthConfigObject, _jsonSerializerOptions) }\n    };\n}\n')])])]),n("p",[e._v("在index.html中。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<title>%(DocumentTitle)</title>\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var configObject = JSON.parse('%(ConfigObject)');\nvar oauthConfigObject = JSON.parse('%(OAuthConfigObject)');\n")])])]),n("p",[e._v("当我们写的aspnetcore项目集成swagger组件后，只会有一个ajax的异步请求")]),e._v(" "),n("h3",{attrs:{id:"knife4j-v3-spring-ui"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#knife4j-v3-spring-ui"}},[e._v("#")]),e._v(" knife4j-v3-spring-ui")]),e._v(" "),n("p",[e._v("效果(2.X版)："),n("a",{attrs:{href:"http://knife4j.xiaominfo.com/doc.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://knife4j.xiaominfo.com/doc.html"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("由于官方也没有v3的demo，我们可以暂时通过v2分析,发现他有3个异步请求，有一个请求返回相似的。另一个则是swagger的配置项，可以发现，返回值与SwaggerUIOptions一致。")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("功能")]),e._v(" "),n("th",[e._v("c# （swagger v3）")]),e._v(" "),n("th",[e._v("java（swagger v2)")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("获取分组配置")]),e._v(" "),n("td",[e._v("无")]),e._v(" "),n("td",[e._v("/swagger-resources")])]),e._v(" "),n("tr",[n("td",[e._v("swagger配置项")]),e._v(" "),n("td",[e._v("无")]),e._v(" "),n("td",[e._v("/swagger-resources/configuration/ui")])]),e._v(" "),n("tr",[n("td",[e._v("api文档")]),e._v(" "),n("td",[e._v("https://api.igeekfan.cn/swagger/v1/swagger.json")]),e._v(" "),n("td",[e._v("/v2/api-docs?group=2.X版本")])])])]),e._v(" "),n("h3",{attrs:{id:"结构如下。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结构如下。"}},[e._v("#")]),e._v(" 结构如下。")]),e._v(" "),n("ul",[n("li",[e._v("版本分组配置")]),e._v(" "),n("li",[e._v("http://knife4j.xiaominfo.com/swagger-resources")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[\n    {\n        "name":"2.X版本",\n        "url":"/v2/api-docs?group=2.X版本",\n        "swaggerVersion":"2.0",\n        "location":"/v2/api-docs?group=2.X版本"\n    },\n    {\n        "name":"分组接口",\n        "url":"/v2/api-docs?group=分组接口",\n        "swaggerVersion":"2.0",\n        "location":"/v2/api-docs?group=分组接口"\n    },\n    {\n        "name":"默认接口",\n        "url":"/v2/api-docs?group=默认接口",\n        "swaggerVersion":"2.0",\n        "location":"/v2/api-docs?group=默认接口"\n    }\n]\n')])])]),n("ul",[n("li",[e._v("swagger 配置项")]),e._v(" "),n("li",[e._v("http://knife4j.xiaominfo.com/swagger-resources/configuration/ui\n请求方法: GET")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n    "deepLinking":true,\n    "displayOperationId":false,\n    "defaultModelsExpandDepth":1,\n    "defaultModelExpandDepth":1,\n    "defaultModelRendering":"example",\n    "displayRequestDuration":false,\n    "docExpansion":"none",\n    "filter":false,\n    "operationsSorter":"alpha",\n    "showExtensions":false,\n    "tagsSorter":"alpha",\n    "validatorUrl":"",\n    "apisSorter":"alpha",\n    "jsonEditor":false,\n    "showRequestHeaders":false,\n    "supportedSubmitMethods":[\n        "get",\n        "put",\n        "post",\n        "delete",\n        "options",\n        "head",\n        "patch",\n        "trace"\n    ]\n}\n')])])]),n("ul",[n("li",[e._v("api 文档")]),e._v(" "),n("li",[e._v("http://knife4j.xiaominfo.com/v2/api-docs?group=2.X%E7%89%88%E6%9C%AC")])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://pic.downk.cc/item/5f2fb78c14195aa594d23f4a.jpg",alt:""}})]),e._v(" "),n("p",[e._v("接下来我们看下knife4j,可以看到，他有knife4j-vue-v3项目，这个是swagger v3版本的vue实现。")]),e._v(" "),n("p",[e._v("我们打开knife4j-vue-v3项目，修改配置项vue.config.js,devServer 反向代理的地址(后台地址)")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("proxy: {\n  \"/\": {\n    target: 'http://localhost:5000/',\n    ws: true,\n    changeOrigin: true\n  }\n}\n")])])]),n("p",[e._v("安装依赖，并运行他")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("yarn install\nyarn serve\n")])])]),n("p",[e._v("我们会看到一个请求错误。Knife4j文档请求异常，因为后台并没有：'/v3/api-docs/swagger-config'。")]),e._v(" "),n("p",[e._v("也就是上文中的/swagger-resources/configuration/ui，我们可以在SwaggerUIMiddleware中间件获取这些参数，原本是通过替换字符串，现在，我们可以写一个api。怎么写呢。")]),e._v(" "),n("p",[e._v("下载Swashbuckle.AspNetCore的源码，打开Swashbuckle.AspNetCore.sln。")]),e._v(" "),n("p",[e._v("我们尝试修改Swashbuckle.AspNetCore.SwaggerUI项目中,SwaggerUIMiddleware中的源码。")]),e._v(" "),n("p",[e._v("Invoke方法增加如下处理，将配置项直接返回json串。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('if (httpMethod == "GET" && Regex.IsMatch(path, $"^/v3/api-docs/swagger-config$"))\n{\n     await httpContext.Response.WriteAsync(JsonSerializer.Serialize(_options.ConfigObject, _jsonSerializerOptions));\n    return;\n}\n\n')])])]),n("p",[e._v("在swagger v3 版本中,"),n("strong",[e._v("/v3/api-docs/swagger-config")]),e._v(",返回了分组信息,urls字段。\n"),n("img",{attrs:{src:"https://pic.downk.cc/item/5f2feaf014195aa594e1a5cf.jpg",alt:"image"}})]),e._v(" "),n("p",[e._v("效果如下")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://pic.downk.cc/item/5f2feb1714195aa594e1af42.jpg",alt:"image"}})]),e._v(" "),n("p",[e._v("设置test/WebSites/Basic项目为启动项目，运行后,打开了http://localhost:5000/index.html，这个还是原本的swagger ui，我们打开http://localhost:8080/#/home，前台依旧提示有问题。")]),e._v(" "),n("p",[e._v("AddSwaggerGen 需要增加Server，前台判断有BUG，非空。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://pic.downk.cc/item/5f2fc1cd14195aa594d5dabc.jpg",alt:"image"}})]),e._v(" "),n("p",[e._v("servers.length得到的是0，问号表达式就会执行后面的servers[0].url，")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://pic.downk.cc/item/5f2fc22214195aa594d5f883.jpg",alt:""}})]),e._v(" "),n("p",[e._v("临时方案")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('services.AddSwaggerGen(c =>\n{\n\n    c.AddServer(new OpenApiServer()\n    {\n        Url = "",\n        Description = "v1"\n    });\n});\n')])])]),n("p",[e._v('但还有一个问题，前台根据operationId生成的路由，    [HttpPost(Name = "CreateProduct")]比如CreateProduct。有些没有设置 Name的，点击后就会出现空白界面。')]),e._v(" "),n("p",[e._v("增加CustomOperationIds的配置，通过反射获取方法名。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("services.AddSwaggerGen(c =>\n{\n    //xx\n     c.CustomOperationIds(apiDesc =>\n    {\n        return apiDesc.TryGetMethodInfo(out MethodInfo methodInfo) ? methodInfo.Name : null;\n    });\n});\n")])])]),n("p",[e._v("解决了这些问题。")]),e._v(" "),n("p",[e._v("我们创建一个新类库，起名"),n("strong",[e._v("IGeekFan.AspNetCore.Knife4jUI")])]),e._v(" "),n("p",[e._v("将前端打包。修改打包文件配置，vue.config.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('assetsDir: "knife4j",\nindexPath: "index.html"\n')])])]),n("p",[e._v("打包")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("yarn run build\n")])])]),n("p",[e._v("复制到根目录，设置为嵌入文件，删除不需要的images和txt文本。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<ItemGroup>\n\t<EmbeddedResource Include="knife4j/**/*" />\n\t<EmbeddedResource Include="favicon.ico" />\n\t<EmbeddedResource Include="index.html" />\n</ItemGroup>\n')])])]),n("p",[e._v("将后台Swashbuckle.AspNetCore.SwaggerUI的代码复制过来，全部重命名。比如中间件名字为")]),e._v(" "),n("p",[e._v("SwaggerUIMiddleware -> Knife4jUIMiddleware。即SwaggerUI都改成Knife4jUI。")]),e._v(" "),n("p",[e._v("Knife4jUIMiddleware修改位置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('private const string EmbeddedFileNamespace = "IGeekFan.AspNetCore.Knife4jUI";\n')])])]),n("p",[e._v("删除无用的替换变量，增加")]),e._v(" "),n("p",[e._v("Knife4UIOptions 修改")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public Func<Stream> IndexStream { get; set; } = () => typeof(Knife4UIOptions).GetTypeInfo().Assembly\n            .GetManifestResourceStream("IGeekFan.AspNetCore.Knife4jUI.index.html");\n')])])]),n("h3",{attrs:{id:"startup-中的configure中间件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#startup-中的configure中间件"}},[e._v("#")]),e._v(" Startup 中的Configure中间件")]),e._v(" "),n("p",[e._v("将UseSwaggerUI()改成UseKnife4UI()")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('app.UseKnife4UI(c =>\n{\n    c.RoutePrefix = ""; // serve the UI at root\n    c.SwaggerEndpoint("/v1/api-docs", "V1 Docs");\n    c.SwaggerEndpoint("/gp/api-docs", "登录模块");\n});\n')])])]),n("h3",{attrs:{id:"不用igeekfan-aspnetcore-knife4jui也能实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不用igeekfan-aspnetcore-knife4jui也能实现"}},[e._v("#")]),e._v(" 不用IGeekFan.AspNetCore.Knife4jUI也能实现？")]),e._v(" "),n("p",[e._v("当然，可以。可以看这个demo"),n("a",{attrs:{href:"https://github.com/luoyunchong/IGeekFan.AspNetCore.Knife4jUI/tree/master/samples/SwaggerUI_IndexStream_Knife4jUI_Demo",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/luoyunchong/IGeekFan.AspNetCore.Knife4jUI/tree/master/samples/SwaggerUI_IndexStream_Knife4jUI_Demo"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("我们也能通过其他方式，在SwaggerUI的基础上，替换比如替换Index.html页面，自己打包前端UI，复制到项目中等。")]),e._v(" "),n("p",[e._v("将knife4j-vue-v3项目打包，放到wwwwroot目录中。")]),e._v(" "),n("p",[e._v("需要配置静态文件。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    app.UseStaticFiles();\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('app.UseSwaggerUI(c =>\n{\n        c.RoutePrefix = ""; // serve the UI at root\n        c.SwaggerEndpoint("/v1/api-docs", "V1 Docs");//这个配置无效。\n        c.IndexStream = () => new PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot")).GetFileInfo("index.html").CreateReadStream();\n});\n')])])]),n("p",[e._v("重写/v3/api-docs/swagger-config路由")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('app.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n    endpoints.MapSwagger("{documentName}/api-docs");\n    endpoints.MapGet("/v3/api-docs/swagger-config", async (httpContext) =>\n    {\n\n        JsonSerializerOptions _jsonSerializerOptions = new JsonSerializerOptions();\n        _jsonSerializerOptions.PropertyNamingPolicy = JsonNamingPolicy.CamelCase;\n        _jsonSerializerOptions.IgnoreNullValues = true;\n        _jsonSerializerOptions.Converters.Add(new JsonStringEnumConverter(JsonNamingPolicy.CamelCase, false));\n\n        SwaggerUIOptions _options = new SwaggerUIOptions()\n        {\n            ConfigObject = new ConfigObject()\n            {\n                Urls = new List<UrlDescriptor>\n                {\n                    new UrlDescriptor()\n                    {\n                        Url="/v1/api-docs",\n                        Name="V1 Docs"\n                    }\n                }\n            }\n        };\n\n        await httpContext.Response.WriteAsync(JsonSerializer.Serialize(_options.ConfigObject, _jsonSerializerOptions));\n    });\n});\n')])])]),e._v(" "),n("comment-comment")],1)}),[],!1,null,null,null);t.default=r.exports}}]);