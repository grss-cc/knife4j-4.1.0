(window.webpackJsonp=window.webpackJsonp||[]).push([[415],{764:function(e,t,a){"use strict";a.r(t);var o=a(42),r=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_5-3-执行步骤解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-执行步骤解析"}},[e._v("#")]),e._v(" 5.3 执行步骤解析")]),e._v(" "),a("p",[a("code",[e._v("knife4j")]),e._v("的整个执行初始化过程如下图：")]),e._v(" "),a("p",[a("img",{attrs:{src:"/knife4j/images/knife4j/execute.png",alt:""}})]),e._v(" "),a("p",[e._v("上图中的蓝色接口(全部是springfox框架提供)说明如下：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("/swagger-resources/configuration/ui")]),e._v(":该接口是Swagger的个性化配置接口,包括Swagger的排序,支持接口的调试类型等配置")]),e._v(" "),a("li",[a("code",[e._v("/swagger-resources")]),e._v(":该接口是我们在Swagger的界面中见到的分组下拉框数据初始化接口,在当前微服务盛行的情况下,你可以把他理解为一个服务(例如用户服务、订单服务等)")]),e._v(" "),a("li",[a("code",[e._v("/v2/api-docs?groupName=default")]),e._v(":该接口是单个服务下的Swagger实例,返回的数据是一个完整的Swagger V2版本的JSON结构")])]),e._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),a("p",[e._v("注意,以上只是Java技术体系所用到的接口说明,在这里列出来单独说明,只是希望非Java技术体系的开发者能够明白目前"),a("code",[e._v("knife4j")]),e._v("所做的封装调用工作")]),e._v(" "),a("p",[e._v("后面的篇幅会提到如何基于源码来进行接口地址更改,地址的更改很方便,但是最重要的是每个接口所代表的意义。")])]),e._v(" "),a("p",[e._v("接下来,我们将介绍如何基于源码的方式改造得到front版本,请参考"),a("RouterLink",{attrs:{to:"/documentation/knife4j-front-source-modified.html"}},[e._v("下一篇")])],1),e._v(" "),a("comment-comment")],1)}),[],!1,null,null,null);t.default=r.exports}}]);