(window.webpackJsonp=window.webpackJsonp||[]).push([[615],{967:function(t,a,e){"use strict";e.r(a);var s=e(42),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_2-3-使用说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-使用说明"}},[t._v("#")]),t._v(" 2.3 使用说明")]),t._v(" "),e("p",[t._v("本篇文档主要介绍如何使用"),e("code",[t._v("Knife4jAggregationDesktop")])]),t._v(" "),e("h2",{attrs:{id:"_2-3-1-增加文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-增加文档"}},[t._v("#")]),t._v(" 2.3.1 增加文档")]),t._v(" "),e("p",[t._v("当"),e("code",[t._v("Knife4jAggregationDesktop")]),t._v("软件启动后,开发者想要增加OpenAPI文档应该怎么办？")]),t._v(" "),e("p",[t._v("从技术架构图可以看到,"),e("code",[t._v("Knife4jAggregationDesktop")]),t._v("提供了"),e("code",[t._v("MetaDataMonitor")]),t._v("组件,该组件是一个监听器,主要监听data目录。当开发者在data目录新建文件夹(文档)后，添加相应的配置文件后自动加载元数据配置，无需重启即可在线访问文档")]),t._v(" "),e("p",[t._v("在data目录下，开发者可以建N个一级文件夹(文档),文件夹名称必须是英文或英文+数组，示例如下：")]),t._v(" "),e("div",{staticClass:"language-shell script extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("-data\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("------ROOT  \n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("------project1\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("------project2\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("------project3\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("-----—project4\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("-----—more"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),e("p",[t._v("ROOT目录代表的是根目录，最终访问文档的地址是："),e("code",[t._v("http://ip:port/doc.html")])]),t._v(" "),e("p",[t._v("而开发者自建的文件夹目录，例如project1、project2、project3等等，所代表的是一个项目名称，最终访问的地址如下：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("项目code")]),t._v(" "),e("th",[t._v("文档地址")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("ROOT")]),t._v(" "),e("td",[t._v("根目录，访问地址："),e("code",[t._v("http://ip:port/doc.html")])])]),t._v(" "),e("tr",[e("td",[t._v("project1")]),t._v(" "),e("td",[e("code",[t._v("http://ip:port/project1/doc.html")])])]),t._v(" "),e("tr",[e("td",[t._v("project2")]),t._v(" "),e("td",[e("code",[t._v("http://ip:port/project2/doc.html")])])]),t._v(" "),e("tr",[e("td",[t._v("project3")]),t._v(" "),e("td",[e("code",[t._v("http://ip:port/project3/doc.html")])])]),t._v(" "),e("tr",[e("td",[t._v("project4")]),t._v(" "),e("td",[e("code",[t._v("http://ip:port/project4/doc.html")])])]),t._v(" "),e("tr",[e("td",[t._v("以此类推")]),t._v(" "),e("td",[e("code",[t._v("http://ip:port/${code}/doc.html")])])])])]),t._v(" "),e("h2",{attrs:{id:"_2-3-2-配置文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-配置文档"}},[t._v("#")]),t._v(" 2.3.2 配置文档")]),t._v(" "),e("p",[t._v("在上面的介绍种，我们知道了如何增加多个文档，其实很简单，只需要在data目录建文件夹即可，那么建立好了文件夹后，如何配置呢？")]),t._v(" "),e("p",[t._v("这里需要涉及到Knife4jAggregation提供支持的4种模式了：Disk、Cloud、Eureka、Nacos")]),t._v(" "),e("p",[e("strong",[t._v("一个项目文件夹只支持一种模式")])]),t._v(" "),e("p",[t._v("拿ROOT根目录来做示例说明，开发者如何配置。")]),t._v(" "),e("h3",{attrs:{id:"_2-3-2-1-disk模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-1-disk模式"}},[t._v("#")]),t._v(" 2.3.2.1 Disk模式")]),t._v(" "),e("p",[t._v("Disk模式在Knife4jAggregationDesktop中是最简单的，如果开发者拥有OpenAPI文档的静态"),e("code",[t._v("JSON")]),t._v("文件或者"),e("code",[t._v("yml")]),t._v("文件，那么就可以直接放在建好的文件夹中，不用任何配置，即可渲染。")]),t._v(" "),e("p",[t._v("目录结构如下：")]),t._v(" "),e("div",{staticClass:"language-shell script extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("-data\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("------ROOT  \n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--------userOpenApi.json\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--------orderOpenApi.json\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--------goodsOpenApi.yml\n\n")])])]),e("p",[t._v("在ROOT目录下，我们放置了三个OpenAPI文档的静态文件："),e("code",[t._v("userOpenAPI")]),t._v("以及"),e("code",[t._v("orderOpenApi")]),t._v("、"),e("code",[t._v("goodsOpenApi.yml")]),t._v(",此时访问地址："),e("code",[t._v("http://ip:port/doc.html")])]),t._v(" "),e("p",[t._v("开发者就能在文档界面中看到会存在三个分组下的OpenAPI文档了。")]),t._v(" "),e("p",[t._v("那么随之问题也来了，在文档中，下拉框的选项名称是以文件的名称来命名显示的，如果要自定义显示应该怎么办？，此时就需要继续在ROOT目录添加一个名为"),e("code",[t._v("disk.properties")]),t._v("的配置文件来进行重命名配置")]),t._v(" "),e("p",[e("code",[t._v("disk.properties")]),t._v("配置文件(该配置和"),e("RouterLink",{attrs:{to:"/resources/aggregation-introduction.html"}},[t._v("Knife4jAggregation聚合组件")]),t._v("中声明的"),e("RouterLink",{attrs:{to:"/resources/aggregation-disk.html"}},[t._v("disk模式")]),t._v("的route节点配置完全一样)：")],1),t._v(" "),e("div",{staticClass:"language-properties extra-class"},[e("pre",{pre:!0,attrs:{class:"language-properties"}},[e("code",[e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("knife4j.disk.routes[0].name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("用户服务")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此处location需要注意，只需要配置同级的文件名称即可")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("knife4j.disk.routes[0].location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("userOpenApi.json")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("knife4j.disk.routes[1].name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("订单服务")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此处location需要注意，只需要配置同级的文件名称即可")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("knife4j.disk.routes[1].location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("orderOpenApi.json")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("knife4j.disk.routes[2].name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("商品服务")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此处location需要注意，只需要配置同级的文件名称即可")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("knife4j.disk.routes[2].location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("goodsOpenApi.yml")]),t._v("\n\n")])])]),e("p",[t._v("配置好后，无需重启，应用会自动加载,也可以参考"),e("RouterLink",{attrs:{to:"/resources/desktop-test.html"}},[t._v("测试场景")]),t._v("中的配置")],1),t._v(" "),e("h3",{attrs:{id:"_2-3-2-1-cloud模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-1-cloud模式"}},[t._v("#")]),t._v(" 2.3.2.1 Cloud模式")]),t._v(" "),e("p",[t._v("Cloud模式则是需要在创建好的文件夹目录下新建"),e("code",[t._v("cloud.properties")]),t._v("配置文件，然后配置Cloud模式的节点属性")]),t._v(" "),e("p",[t._v("目录结构如下：")]),t._v(" "),e("div",{staticClass:"language-shell script extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("-data\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("------ROOT  \n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--------cloud.properties\n")])])]),e("p",[e("code",[t._v("cloud.properties")]),t._v("配置文件(该配置和"),e("RouterLink",{attrs:{to:"/resources/aggregation-introduction.html"}},[t._v("Knife4jAggregation聚合组件")]),t._v("中声明的"),e("RouterLink",{attrs:{to:"/resources/aggregation-cloud.html"}},[t._v("Cloud模式")]),t._v("的route节点配置完全一样)：")],1),t._v(" "),e("div",{staticClass:"language-properties extra-class"},[e("pre",{pre:!0,attrs:{class:"language-properties"}},[e("code",[e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("knife4j.cloud.routes[0].name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("用户")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("knife4j.cloud.routes[0].uri")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("192.168.0.152:8999")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("knife4j.cloud.routes[0].location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("/v2/api-docs?group=2.X版本")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# more...具体参考Knife4jAggregation聚合组件配置Cloud模式")]),t._v("\n\n")])])]),e("p",[t._v("配置好后，无需重启，应用会自动加载,也可以参考"),e("RouterLink",{attrs:{to:"/resources/desktop-test.html"}},[t._v("测试场景")]),t._v("中的配置")],1),t._v(" "),e("h3",{attrs:{id:"_2-3-2-2-eureka模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-2-eureka模式"}},[t._v("#")]),t._v(" 2.3.2.2 Eureka模式")]),t._v(" "),e("p",[t._v("Eureka模式则是需要在创建好的文件夹目录下新建"),e("code",[t._v("eureka.properties")]),t._v("配置文件，然后配置eureka模式的节点属性")]),t._v(" "),e("p",[t._v("目录结构如下：")]),t._v(" "),e("div",{staticClass:"language-shell script extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("-data\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("------ROOT  \n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--------eureka.properties\n")])])]),e("p",[e("code",[t._v("eureka.properties")]),t._v("配置文件(该配置和"),e("RouterLink",{attrs:{to:"/resources/aggregation-introduction.html"}},[t._v("Knife4jAggregation聚合组件")]),t._v("中声明的"),e("RouterLink",{attrs:{to:"/resources/aggregation-eureka.html"}},[t._v("Eloud模式")]),t._v("的route节点配置完全一样)：")],1),t._v(" "),e("div",{staticClass:"language-properties extra-class"},[e("pre",{pre:!0,attrs:{class:"language-properties"}},[e("code",[e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("knife4j.eureka.serviceUrl")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("http://localhost:10000/eureka/")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("knife4j.eureka.routes[0].name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("用户")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("knife4j.eureka.routes[0].serviceName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("userService")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("knife4j.eureka.routes[0].location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("/v2/api-docs?group=2.X版本")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# more...具体参考Knife4jAggregation聚合组件配置Eureka模式")]),t._v("\n")])])]),e("p",[t._v("配置好后，无需重启，应用会自动加载,也可以参考"),e("RouterLink",{attrs:{to:"/resources/desktop-test.html"}},[t._v("测试场景")]),t._v("中的配置")],1),t._v(" "),e("h3",{attrs:{id:"_2-3-2-3-nacos模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-3-nacos模式"}},[t._v("#")]),t._v(" 2.3.2.3 Nacos模式")]),t._v(" "),e("p",[t._v("Nacos模式则是需要在创建好的文件夹目录下新建"),e("code",[t._v("nacos.properties")]),t._v("配置文件，然后配置nacos模式的节点属性")]),t._v(" "),e("p",[t._v("目录结构如下：")]),t._v(" "),e("div",{staticClass:"language-shell script extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("-data\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("------ROOT  \n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--------nacos.properties\n")])])]),e("p",[e("code",[t._v("nacos.properties")]),t._v("配置文件(该配置和"),e("RouterLink",{attrs:{to:"/resources/aggregation-introduction.html"}},[t._v("Knife4jAggregation聚合组件")]),t._v("中声明的"),e("RouterLink",{attrs:{to:"/resources/aggregation-nacos.html"}},[t._v("Nacos模式")]),t._v("的route节点配置完全一样)：")],1),t._v(" "),e("div",{staticClass:"language-properties extra-class"},[e("pre",{pre:!0,attrs:{class:"language-properties"}},[e("code",[e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("knife4j.nacos.serviceUrl")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("http://localhost:10000/nacos/")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("knife4j.nacos.routes[0].name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("用户")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("knife4j.nacos.routes[0].serviceName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("userService")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("knife4j.nacos.routes[0].location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("/v2/api-docs?group=2.X版本")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# more...具体参考Knife4jAggregation聚合组件配置Nacos模式")]),t._v("\n")])])]),e("p",[t._v("配置好后，无需重启，应用会自动加载,也可以参考"),e("RouterLink",{attrs:{to:"/resources/desktop-test.html"}},[t._v("测试场景")]),t._v("中的配置")],1),t._v(" "),e("comment-comment")],1)}),[],!1,null,null,null);a.default=r.exports}}]);